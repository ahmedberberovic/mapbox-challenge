{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Map","ReactMapboxGl","accessToken","drawingCheck","marks","value","label","App","state","handleChange","event","setState","onDrawCreate","features","onDrawUpdate","onDrawSelectionChange","onDrawActionable","_onClickMap","map","evt","getLayer","removeLayer","getSource","removeSource","lng","lngLat","lat","addSource","type","data","addLayer","this","id","style","center","containerStyle","height","width","zoom","onClick","bind","position","displayControlsDefault","controls","polygon","trash","Slider","step","valueLabelDisplay","aria-label","defaultValue","max","min","padding","margin","aria-labelledby","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAMMA,EAAMC,kBAAc,CACxBC,YACE,+FAIAC,GAAe,EAEbC,EAAQ,CACZ,CACEC,MAAO,EACPC,MAAO,SAET,CACED,MAAO,IACPC,MAAO,YAET,CACED,MAAO,IACPC,MAAO,YAIUC,E,2MAEjBC,MAAQ,CACNH,MAAO,M,EAGTI,aAAe,SAACC,EAAOL,GACrB,EAAKM,SAAS,CAAEN,W,EAGlBO,aAAe,YAAkB,EAAfC,SAChBV,GAAe,G,EAEjBW,aAAe,YAAkB,EAAfD,SAChBV,GAAe,G,EAEjBY,sBAAwB,YAAkB,EAAfF,SACzBV,GAAe,G,EAEjBa,iBAAmB,YAAkB,EAAfH,SACpBV,GAAe,G,EAGjBc,YAAc,SAACC,EAAKC,GAClB,IAAkB,IAAfhB,EAAqB,CAChBe,EAAIE,SAAS,UAAUF,EAAIG,YAAY,SACvCH,EAAII,UAAU,gBAAgBJ,EAAIK,aAAa,eAEnD,IAAIC,EAAIL,EAAIM,OAAOD,IACfE,EAAIP,EAAIM,OAAOC,IAEnBR,EAAIS,UAAU,cAAe,CACvBC,KAAM,UACNC,KAAM,CACJ,KAAQ,oBACR,SAAY,CACd,CACE,KAAQ,UACR,WAAc,CACZ,OAAU,UACV,eAAgB,EAChB,iBAAkB,GAEpB,SAAY,CACV,KAAQ,aACR,YAAe,CACb,CACEL,EACAE,GAEF,CACEF,EAAI,EAAKhB,MAAMH,MACfqB,MAKR,CACE,KAAQ,UACR,WAAc,CACZ,OAAU,UACV,eAAgB,EAChB,iBAAkB,GAEpB,SAAY,CACV,KAAQ,aACR,YAAe,CACb,CACEF,EACAE,EAAI,OAEN,CACEF,EAAI,EAAKhB,MAAMH,MACfqB,EAAI,cAQlBR,EAAIY,SAAS,CACT,GAAM,QACN,KAAQ,OACR,OAAU,cAEN,OAAU,CACV,YAAa,QACb,WAAY,SAEZ,MAAS,CACT,aAAc,UACd,aAAc,O,wEAMpB,IAEAzB,EAAU0B,KAAKvB,MAAfH,MAER,OAEE,6BACA,yBAAK2B,GAAG,SACN,kBAAChC,EAAD,CACEiC,MAAM,sCACNC,OAAQ,CAAC,mBAAmB,oBAC5BC,eAAgB,CACdC,OAAQ,OACRC,MAAO,SAETC,KAAM,CAAC,IAGPC,QAASR,KAAKd,YAAYuB,KAAKT,OAG/B,kBAAC,IAAD,CACIU,SAAS,WACT7B,aAAcmB,KAAKnB,aACnBE,aAAciB,KAAKjB,aACnBE,iBAAkBe,KAAKf,iBACvB0B,wBAAyB,EACzB3B,sBAAuBgB,KAAKhB,sBAC5B4B,SAAW,CACTC,SAAS,EACTC,OAAO,MAKf,kBAACC,EAAA,EAAD,CACIC,KAAM,KACNC,kBAAkB,KAClBC,aAAW,qBACXC,aAAc,KACdC,IAAK,IACLC,IAAK,KACLnB,MAAO,CACLI,MAAO,QACPgB,QAAS,mBACTC,OAAQ,oBAEVjD,MAAOA,EACPkD,kBAAgB,QAChBC,SAAUzB,KAAKtB,aAAa+B,KAAKT,MACjC3B,MAAOA,S,GApJcqD,aCjBbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f1df5529.chunk.js","sourcesContent":["import React, { Component} from \"react\";\nimport ReactMapboxGl from 'react-mapbox-gl';\nimport DrawControl from \"react-mapbox-gl-draw\";\nimport \"@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css\";\nimport Slider from '@material-ui/core/Slider';\n\nconst Map = ReactMapboxGl({\n  accessToken:\n    'pk.eyJ1IjoiYWhtZWRiaDkiLCJhIjoiY2s1bzZkbmQ1MDNzMTNzcWw0eXJpc3duNiJ9.RcZZI2_JbPoeFp-14N8y8w'\n\n});\n\nlet drawingCheck = false;\n\nconst marks = [\n  {\n    value: 0,\n    label: '0°',\n  },\n  {\n    value: 0.75,\n    label: '0.75°',\n  },\n  {\n    value: 1.5,\n    label: '1.5°',\n  },\n];\n\nexport default class App extends Component {\n\n    state = {\n      value: 0.037,\n    };\n\n    handleChange = (event, value) => {\n      this.setState({ value });\n    };\n\n    onDrawCreate = ({ features }) => {\n      drawingCheck = true;\n    };\n    onDrawUpdate = ({ features }) => {\n      drawingCheck = true;\n    };\n    onDrawSelectionChange = ({ features }) => {\n      drawingCheck = false;\n    };\n    onDrawActionable = ({ features }) => {\n      drawingCheck = true;\n    };\n\n    _onClickMap = (map, evt) => { \n      if(drawingCheck===false){\n          if (map.getLayer('route')) map.removeLayer('route');\n          if (map.getSource('routesource')) map.removeSource('routesource');\n\n          let lng=evt.lngLat.lng;\n          let lat=evt.lngLat.lat;\n\n          map.addSource('routesource', {\n                type: 'geojson',\n                data: {\n                  \"type\": \"FeatureCollection\",\n                  \"features\": [\n                {\n                  \"type\": \"Feature\",\n                  \"properties\": {\n                    \"stroke\": \"#555555\",\n                    \"stroke-width\": 3,\n                    \"stroke-opacity\": 1\n                  },\n                  \"geometry\": {\n                    \"type\": \"LineString\",\n                    \"coordinates\": [\n                      [\n                        lng,\n                        lat\n                      ],\n                      [\n                        lng+this.state.value,\n                        lat\n                      ]\n                    ]\n                  }\n                },\n                {\n                  \"type\": \"Feature\",\n                  \"properties\": {\n                    \"stroke\": \"#555555\",\n                    \"stroke-width\": 3,\n                    \"stroke-opacity\": 1\n                  },\n                  \"geometry\": {\n                    \"type\": \"LineString\",\n                    \"coordinates\": [\n                      [\n                        lng,\n                        lat+0.0013\n                      ],\n                      [\n                        lng+this.state.value,\n                        lat+0.0013\n                      ]\n                    ]\n                  }\n                }\n              ]\n            }\n          });\n          map.addLayer({\n              'id': 'route',\n              'type': 'line',\n              'source': 'routesource',\n                  \n                  'layout': {\n                  'line-join': 'round',\n                  'line-cap': 'round'\n                  },\n                  'paint': {\n                  'line-color': '#0044FF',\n                  'line-width': 5\n                  }\n          });\n      }\n    };\n\n  render() {\n    \n    const { value } = this.state;\n\n    return (\n\n      <div>\n      <pre id=\"info\"></pre>\n        <Map\n          style=\"mapbox://styles/mapbox/satellite-v9\"\n          center={[28.672388600125828,41.062677228593344]}\n          containerStyle={{\n            height: '80vh',\n            width: '100vw'\n          }}\n          zoom={[10]}\n          //center={[-122.48369693756104, 37.83381888486939]}\n          //center={[-73.97777080535889, 40.69336192556367]}\n          onClick={this._onClickMap.bind(this)}\n        >\n\n          <DrawControl\n              position=\"top-left\"\n              onDrawCreate={this.onDrawCreate}\n              onDrawUpdate={this.onDrawUpdate}\n              onDrawActionable={this.onDrawActionable}\n              displayControlsDefault= {false}\n              onDrawSelectionChange={this.onDrawSelectionChange}\n              controls= {{\n                polygon: true,\n                trash: true\n              }}\n            />\n        </Map>\n\n        <Slider\n            step={0.0001}\n            valueLabelDisplay=\"on\"\n            aria-label=\"custom thumb label\"\n            defaultValue={0.037}\n            max={1.5}\n            min={0.005}\n            style={{\n              width: '230px',\n              padding: '20px 15px 10px 0',\n              margin: '40px 20px 0 20px'\n            }}\n            value={value}\n            aria-labelledby=\"label\"\n            onChange={this.handleChange.bind(this)}\n            marks={marks}\n        />\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}