{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Map","ReactMapboxGl","accessToken","valueLength","App","state","value","handleChange","event","setState","onDrawCreate","features","console","log","onDrawUpdate","map","evt","getLayer","removeLayer","getSource","removeSource","lngLat","document","getElementById","innerHTML","JSON","stringify","wrap","lng","lat","addSource","type","data","addLayer","this","id","style","center","containerStyle","height","width","zoom","onClick","_onClickMap","position","Slider","step","valueLabelDisplay","aria-label","defaultValue","max","min","padding","margin","aria-labelledby","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAQMA,EAAMC,kBAAc,CACxBC,YACE,+FAIAC,EAAY,KAEKC,E,2MAEnBC,MAAQ,CACNC,MAAO,M,EAGTC,aAAe,SAACC,EAAOF,GACrB,EAAKG,SAAS,CAAEH,UAChBH,EAAYG,G,EAIdI,aAAe,YAAmB,IAAhBC,EAAe,EAAfA,SAChBC,QAAQC,IAAIF,I,EAGdG,aAAe,YAAmB,IAAhBH,EAAe,EAAfA,SAChBC,QAAQC,IAAI,CAAEF,c,2EAEJI,EAAKC,GAEXD,EAAIE,SAAS,UAAUF,EAAIG,YAAY,SACvCH,EAAII,UAAU,gBAAgBJ,EAAIK,aAAa,eAEnDR,QAAQC,IAAIG,EAAIK,QAChBC,SAASC,eAAe,QAAQC,UAC9BC,KAAKC,UAAUV,EAAIK,OAAOM,QAC5B,IAAIC,EAAIZ,EAAIK,OAAOO,IACfC,EAAIb,EAAIK,OAAOQ,IACnBd,EAAIe,UAAU,cAAe,CACvBC,KAAM,UACNC,KAAM,CACJ,KAAQ,oBACR,SAAY,CACd,CACE,KAAQ,UACR,WAAc,CACZ,OAAU,UACV,eAAgB,EAChB,iBAAkB,GAEpB,SAAY,CACV,KAAQ,aACR,YAAe,CACb,CACEJ,EACAC,GAEF,CACED,EAAIzB,EACJ0B,MAKR,CACE,KAAQ,UACR,WAAc,CACZ,OAAU,UACV,eAAgB,EAChB,iBAAkB,GAEpB,SAAY,CACV,KAAQ,aACR,YAAe,CACb,CACED,EACAC,EAAI,OAEN,CACED,EAAIzB,EACJ0B,EAAI,cASlBd,EAAIkB,SAAS,CACT,GAAM,QACN,KAAQ,OACR,OAAU,cAEN,OAAU,CACV,YAAa,QACb,WAAY,SAEZ,MAAS,CACT,aAAc,UACd,aAAc,O,+BAKhB,IAEA3B,EAAU4B,KAAK7B,MAAfC,MAER,OAEE,6BAEA,yBAAK6B,GAAG,SACN,kBAACnC,EAAD,CACEoC,MAAM,sCACNC,OAAQ,CAAC,mBAAmB,oBAC5BC,eAAgB,CACdC,OAAQ,OACRC,MAAO,SAETC,KAAM,CAAC,IAGPC,QAASR,KAAKS,aAGd,kBAAC,IAAD,CACIC,SAAS,WACTlC,aAAcwB,KAAKxB,aACnBI,aAAcoB,KAAKpB,eAMrB,kBAAC+B,EAAA,EAAD,CACEC,KAAM,KACNC,kBAAkB,KAClBC,aAAW,qBACXC,aAAc,KACdC,IAAK,IACLC,IAAK,KACLf,MAAO,CACLI,MAAO,QACPY,QAAS,oBACTC,OAAQ,QAEV/C,MAAOA,EACPgD,kBAAgB,QAChBC,SAAUrB,KAAK3B,qB,GA7IMiD,aCJbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DC0FNC,IAASC,OAAO,kBAAC,EAAD,MAASzC,SAASC,eAAe,SDuB3C,kBAAmByC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4e2d5a3f.chunk.js","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactMapboxGl, { GeoJSONLayer } from 'react-mapbox-gl';\nimport DrawControl from \"react-mapbox-gl-draw\";\nimport \"@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css\";\nimport Slider from '@material-ui/core/Slider';\n\n\nconst Map = ReactMapboxGl({\n  accessToken:\n    'pk.eyJ1IjoiYWhtZWRiaDkiLCJhIjoiY2s1bzZkbmQ1MDNzMTNzcWw0eXJpc3duNiJ9.RcZZI2_JbPoeFp-14N8y8w'\n\n});\n\nlet valueLength=0.037;\n\nexport default class App extends Component {\n\n  state = {\n    value: 0.037,\n  };\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n    valueLength=value;\n  };\n \n\n  onDrawCreate = ({ features }) => {\n    console.log(features);\n  };\n\n  onDrawUpdate = ({ features }) => {\n    console.log({ features });\n  };\n  _onClickMap(map, evt) {\n\n    if (map.getLayer('route')) map.removeLayer('route');\n    if (map.getSource('routesource')) map.removeSource('routesource');\n\n    console.log(evt.lngLat);\n    document.getElementById('info').innerHTML =\n      JSON.stringify(evt.lngLat.wrap());\n    let lng=evt.lngLat.lng;\n    let lat=evt.lngLat.lat;\n    map.addSource('routesource', {\n          type: 'geojson',\n          data: {\n            \"type\": \"FeatureCollection\",\n            \"features\": [\n          {\n            \"type\": \"Feature\",\n            \"properties\": {\n              \"stroke\": \"#555555\",\n              \"stroke-width\": 3,\n              \"stroke-opacity\": 1\n            },\n            \"geometry\": {\n              \"type\": \"LineString\",\n              \"coordinates\": [\n                [\n                  lng,\n                  lat\n                ],\n                [\n                  lng+valueLength,\n                  lat\n                ]\n              ]\n            }\n          },\n          {\n            \"type\": \"Feature\",\n            \"properties\": {\n              \"stroke\": \"#555555\",\n              \"stroke-width\": 3,\n              \"stroke-opacity\": 1\n            },\n            \"geometry\": {\n              \"type\": \"LineString\",\n              \"coordinates\": [\n                [\n                  lng,\n                  lat+0.0013\n                ],\n                [\n                  lng+valueLength,\n                  lat+0.0013\n                ]\n              ]\n            }\n          }\n        ]\n      }\n\n        });\n    map.addLayer({\n        'id': 'route',\n        'type': 'line',\n        'source': 'routesource',\n            \n            'layout': {\n            'line-join': 'round',\n            'line-cap': 'round'\n            },\n            'paint': {\n            'line-color': '#0044FF',\n            'line-width': 5\n            }\n        });\n  }\n\nrender() {\n  \n  const { value } = this.state;\n\n  return (\n\n    <div>\n\n    <pre id=\"info\"></pre>\n      <Map\n        style=\"mapbox://styles/mapbox/satellite-v9\"\n        center={[28.672388600125828,41.062677228593344]}\n        containerStyle={{\n          height: '80vh',\n          width: '100vw'\n        }}\n        zoom={[10]}\n        //center={[-122.48369693756104, 37.83381888486939]}\n        //center={[-73.97777080535889, 40.69336192556367]}\n        onClick={this._onClickMap}\n      >\n\n        <DrawControl\n            position=\"top-left\"\n            onDrawCreate={this.onDrawCreate}\n            onDrawUpdate={this.onDrawUpdate}\n          />\n\n\n        {/*<GeoJSONLayer {...geojsonStyles} data={geojson} />*/}\n          \n          <Slider\n            step={0.0001}\n            valueLabelDisplay=\"on\"\n            aria-label=\"custom thumb label\"\n            defaultValue={0.037}\n            max={1.5}\n            min={0.005}\n            style={{\n              width: '230px',\n              padding: '220px 15px 10px 0',\n              margin: '15px'\n            }}\n            value={value}\n            aria-labelledby=\"label\"\n            onChange={this.handleChange}\n          />\n\n      </Map>\n    </div>\n\n  );\n}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/*import React, { Component } from 'react';\nimport ReactDOM from \"react-dom\";\nimport ReactMapboxGl, { GeoJSONLayer } from \"react-mapbox-gl\";\nimport DrawControl from 'react-mapbox-gl-draw';\nimport '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css';\n\nimport \"./styles.css\";\n\nconst Map = ReactMapboxGl({\n  accessToken:\n    'pk.eyJ1IjoiYWhtZWRiaDkiLCJhIjoiY2s1bzZkbmQ1MDNzMTNzcWw0eXJpc3duNiJ9.RcZZI2_JbPoeFp-14N8y8w'\n\n});\nclass App extends Component {\n  onDrawCreate = ({ features }) => {\n    console.log(features);\n  };\n\n  onDrawUpdate = ({ features }) => {\n    console.log({ features });\n  };\n\nrender() {\n    const geojson = {\n      type: \"FeatureCollection\",\n      features: [\n        {\n          type: \"Feature\",\n          properties: {\n            text: \"Fort Greene\"\n          },\n          geometry: {\n            type: \"Polygon\",\n            coordinates: [\n              [\n                [-73.97777080535889, 40.69336192556367],\n                [-73.97704124450682, 40.68986390865585],\n                [-73.97315740585327, 40.68970120572578],\n                [-73.97388696670532, 40.69323177008439],\n                [-73.97777080535889, 40.69336192556367]\n              ]\n            ]\n          }\n        }\n      ]\n    };\n  const geojsonStyles = {\n      lineLayout: {\n        \"line-join\": \"round\",\n        \"line-cap\": \"round\"\n      },\n      linePaint: {\n        \"line-color\": \"#ff11ff\",\n        \"line-width\": 4,\n        \"line-opacity\": 1\n      },\n      symbolLayout: {\n        \"text-field\": \"{text}\",\n        \"symbol-placement\": \"line\",\n        \"text-rotation-alignment\": \"map\",\n        \"text-size\": {\n          base: 1,\n          stops: [[9, 9], [14, 12]]\n        }\n      },\n      symbolPaint: {\n        \"text-color\": \"rgba(0, 0, 0, 1)\",\n        \"text-halo-color\": \"rgba(255, 255, 255, 1)\",\n        \"text-halo-width\": 2\n      }\n    };\n  return (\n    <div className=\"App\">\n      <Map\n        style=\"mapbox://styles/mapbox/streets-v9\"\n        //center={[28.6864, 41.0391]}\n        containerStyle={{\n          height: '80vh',\n          width: '100vw'\n        }}\n        zoom={[16]}\n        center={[-73.9757752418518, 40.69144210646147]}\n      >\n        <DrawControl\n            position=\"top-left\"\n            onDrawCreate={this.onDrawCreate}\n            onDrawUpdate={this.onDrawUpdate}\n          />\n          <GeoJSONLayer {...geojsonStyles} data={geojson} />\n      </Map>\n    </div>\n  );\n}\n}\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);*/\n\n\n\n\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n\n\n\n/*import React from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\n \nmapboxgl.accessToken = \n'pk.eyJ1IjoiYWhtZWRiaDkiLCJhIjoiY2s1bzZkbmQ1MDNzMTNzcWw0eXJpc3duNiJ9.RcZZI2_JbPoeFp-14N8y8w';\n \nclass Application extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tlng: 28.6864 ,\n\t\t\tlat:  41.0391,\n\t\t\tzoom: 10.89\n\t\t};\n\t}\n \n\tcomponentDidMount() {\n\t\tconst map = new mapboxgl.Map({\n\t\t\tcontainer: this.mapContainer,\n\t\t\tstyle: 'mapbox://styles/mapbox/streets-v11',\n\t\t\tcenter: [this.state.lng, this.state.lat],\n\t\t\tzoom: this.state.zoom\n\t\t});\n\t \n\t\tmap.on('move', () => {\n\t\t\tthis.setState({\n\t\t\t\tlng: map.getCenter().lng.toFixed(4),\n\t\t\t\tlat: map.getCenter().lat.toFixed(4),\n\t\t\t\tzoom: map.getZoom().toFixed(2)\n\t\t\t\t});\n\t\t});\n\t}\n\t \n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className='sidebarStyle'>\n\t\t\t\t\t<div>Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom: {this.state.zoom}</div>\n\t\t\t\t</div>\n\t\t\t\t<div ref={el => this.mapContainer = el} className='mapContainer' />\n\t\t\t\t</div>\n\t\t)\n\t}\n}\n \nReactDOM.render(<Application />, document.getElementById('app'));*/"],"sourceRoot":""}